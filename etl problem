import os
import glob
import psycopg2
import pandas as pd
from sql_queries import *

    """
    Description: This function is responsible for Processing song file,
    song data and artist data are extracted from pandas 
    and them inserted into song_table and artist_table respectively.
    INPUTS:
    cur: the cursor object.
    filepath: Song data file path.
    """


def process_song_file(cur, filepath):
    # open song file
    df = pd.read_json(filepath, lines=True) 
    df.head()

    # insert song record
    song_data_df = df[['song_id', 'title', 'artist_id', 'year', 'duration' ]]
    song_data_df = song_data_df.values
    
    song_data = song_data_df[0].tolist()
    
    song_table_insert = "INSERT INTO song_table(song_id, title, artist_id, year, duration) \
                          VALUES (%s, %s, %s, %s, %s) ON CONFLICT (song_id) DO update SET title = EXCLUDED.title;"
    
    
    cur.execute(song_table_insert, song_data)
    
    # insert artist record
    artist_data_df = df[['artist_id', 'artist_name', 'artist_location', 'artist_latitude', 'artist_longitude']]
    artist_data_df = artist_data_df.values
    
    artist_data = artist_data_df[0].tolist()
    
    artist_table_insert = "INSERT INTO artist_table (artist_id, artist_name, artist_location, artist_latitude, artist_longitude) \
                          VALUES (%s, %s, %s, %s, %s) ON CONFLICT DO NOTHING;"
    cur.execute(artist_table_insert, artist_data)

    """
    Description: This function is responsible for Processing log file,
    time, user and songplay data are extracted from pandas 
    and them inserted into time_table user_table and songplay respectively.
    for song_play records it were necessary to perform a JOIN between,
    song and artist tables to get songid for the songplay table
    
    INPUTS:
    cur: the cursor object.
    filepath: log data file path.
    """

def process_log_file(cur, filepath):
    # open log file
    df = pd.read_json(filepath, lines=True) 
    df.head() 

    # filter by NextSong action
    df = df[df['page'] == 'NextSong']
    df.head() 

    # convert timestamp column to datetime
    df['ts'] = pd.to_datetime(df['ts'], unit='ms')
    df.head() 
    
    # insert time data records
    column_labels = ('start_time', 'hour', 'day', 'month','year', 'weekday', 'week')

    time_df = pd.DataFrame()
    time_df['start_time'] = df['ts']
    time_df['hour'] = df['ts'].dt.hour
    time_df['day'] = df['ts'].dt.day
    time_df['month'] = df['ts'].dt.month
    time_df['year'] = df['ts'].dt.year
    time_df['weekday'] = df['ts'].dt.weekday
    time_df['week'] = df['ts'].dt.week
    time = time_df.values.tolist()

    time_df.head()
    
    time_table_insert = "INSERT INTO time_table (start_time, hour, day, month, year, weekday, week) \
                          VALUES (%s, %s, %s, %s, %s, %s, %s) ON CONFLICT DO NOTHING;"
    
    for i, row in time_df.iterrows():
        cur.execute(time_table_insert, list(row))

    # load user table
    column_labels = ('userId', 'firstName', 'lastName', 'gender', 'level')
    user_df = df[['userId', 'firstName', 'lastName', 'gender', 'level']]
    user = user_df.values.tolist()
    user_df.head()
     

    # insert user records
    user_table_insert = "INSERT INTO user_table (userId, firstName, lastName, gender, level) \
                          VALUES (%s, %s, %s, %s, %s) ON CONFLICT DO NOTHING;"
    
    for i, row in user_df.iterrows():
        cur.execute(user_table_insert, row)

    # insert songplay records
        song_select = ("""SELECT song_table.song_id, artist_table.artist_id FROM song_table JOIN artist_table ON (song_table.artist_id = artist_table.artist_id) WHERE \
        song_table.title = %s AND artist_table.artist_name = %s AND song_table.duration = %s""")   

    for index, row in df.iterrows():
        
        # get songid and artistid from song and artist tables
        cur.execute(song_select, (row.song, row.artist, row.length))
        results = cur.fetchone()
        
        if results:
            songid, artistid = results
        else:
            songid, artistid = None, None
            
        songplay_table_insert = "INSERT INTO songplay_table (start_time, userId, level, song_id, artist_id, sessionid, location, userAgent) \
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s) ON CONFLICT DO NOTHING;"
        
        # insert songplay record
        #songplay_data = ("""SELECT ts, user_id, level, song_id, artist_id, session_id, location, userAgent FROM song_table WHERE \
        #song_id = %s and artist_id = %s""") % (songid, artistid)
        songplay_data = [pd.to_datetime(row.ts, unit='ms'), row.userId, row.level, 'song_id', 'artist_id', row.sessionId, row.location, row.userAgent]
        cur.execute(songplay_table_insert, songplay_data)
        
        #cur.execute(songplay_table_insert, songplay_data)

    """
    All json files are processed in filepaths and passed via variables.
    All files inside data/song_data and data/log_data were passed via variables.
    After all is processed, the database itÂ´s updated and files numbers are printed.
    INPUTS:
    cur: the cursor object.
    conn: connection to the database.
    filepath: log data or song data file path.
    func: function that get all the files matched from directory
    """

def process_data(cur, conn, filepath, func):
    # get all files matching extension from directory
    all_files = []
    for root, dirs, files in os.walk(filepath):
        files = glob.glob(os.path.join(root,'*.json'))
        for f in files :
            all_files.append(os.path.abspath(f))

    # get total number of files found
    num_files = len(all_files)
    print('{} files found in {}'.format(num_files, filepath))

    # iterate over files and process
    for i, datafile in enumerate(all_files, 1):
        func(cur, datafile)
        conn.commit()
        print('{}/{} files processed.'.format(i, num_files))
       # print('{}/{} files processed.'.format(i, num_files))


def main():
    conn = psycopg2.connect("host=127.0.0.1 dbname=sparkifydb user=student password=student")
    cur = conn.cursor()

    process_data(cur, conn, filepath='data/song_data', func=process_song_file)
    process_data(cur, conn, filepath='data/log_data', func=process_log_file)

    conn.close()


if __name__ == "__main__":
    main()
